from contextlib import asynccontextmanager
from datetime import datetime
from fastapi import FastAPI
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from src.frontend.bot import bot
from src.backend.sql_core import AsyncORM
from src.frontend.keyboards.inline_keyboards import cleaning

scheduler = AsyncIOScheduler()
NOTIFICATION_TEXT = """
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –≤–∞—à–∏—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö üëá
"""


async def habit_notification():
    ids = await AsyncORM.user_ids()
    for elem in ids:
        await bot.send_message(
            text=NOTIFICATION_TEXT,
            chat_id=elem,
            reply_markup=cleaning,
        )


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    Args:
        app (FastAPI): –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI.
    """
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.add_job(
            habit_notification,
            trigger=IntervalTrigger(days=1, start_date=datetime.now()),
            id="habit_notification",
            replace_existing=True,
        )
        scheduler.start()
        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        yield
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    finally:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.shutdown()
        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
